#! /usr/bin/env python3

import argpars
import csv
import json
import sys
import termcolor

parser = argparse.ArgumentParser(description="Compare Pretix orders with accepted/confirmed Pretix submissions")
parser.add_argument("ticket_item_id", type=int, help="item ID of Pretix for tickets")
parser.add_argument("speakers_file", help="speakers CSV list generated by Pretalx")
parser.add_argument("orders_file", help="orders export of Pretix in JSON format")
args = parser.parse_args()

speaker_file_name = args.speakers_file
orders_file_name = args.orders_file

class Speaker:
    def __init__(self, name, email, code=None):
        self.name = name
        self.email = email.lower()
        self.code = code

orders = []
speakers = []
match_count = 0

# parse JSON
conf = {}
with open(orders_file_name) as file_or:
    conf = json.load(file_or)
orders_raw = conf["event"]["orders"]
for o in orders_raw:
    for p in o["positions"]:
        if p.get("item", 0) != args.ticket_item_id:
            continue
        name = p.get("attendee_name", "")
        email = p.get("attendee_email", "")
        code = o["code"]
        if name is None or email is None: 
            continue
        orders.append(Speaker(name, email, code))

with open(speaker_file_name) as file_sp:
    reader_sp = csv.DictReader(file_sp, delimiter=";")
    for row in reader_sp:
        name = row["name"]
        email = row["email"]
        speakers.append(Speaker(name, email))

# sort speakers and orders
orders.sort(key=lambda o: o.name)
speakers.sort(key=lambda s: s.name)

# check if all speakers in Pretalx have a matching order in Pretix:
last_sp = speakers[0]
for sp in speakers:
    if last_sp.name == sp.name and last_sp.email == sp.email:
        continue
    last_sp = sp
    found = False
    # try email + name
    for o in orders:
        if sp.name == o.name and sp.email == o.email:
            sys.stdout.write(termcolor.colored("matching order found: {} <{}>\n".format(o.name, o.email), "green"))
            match_count += 1
            found = True
            break
    if not found:
        # try email
        for o in orders:
            if sp.email == o.email:
                sys.stdout.write(termcolor.colored("WARNING: email addresses equal found: order name: '{}' order email: '{}' speaker name: '{}' order ID: {}\n".format(o.name, o.email, sp.name, o.code), "yellow"))
                match_count += 1
                found = True
                break
    if not found:
        # try name alone 
        for o in orders:
            if sp.name == o.name:
                sys.stdout.write(termcolor.colored("WARNING: equal names found: order name: '{}' order email: '{}' speaker email: '{}' order ID: {}\n".format(o.name, o.email, sp.email, o.code), "yellow"))
                match_count += 1
                found = True
                break
    if not found:
        sys.stdout.write(termcolor.colored("not found: {} <{}>\n".format(sp.name, sp.email), "red"))

sys.stdout.write("Matches: {} of {}\n".format(match_count, len(speakers)))
